<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">



    <!--过滤器，解决浏览器form表单只支持GET与POST请求，而DELETE、PUT等method并不支持的问题-->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--监听器-->
    <!--<listener>-->
        <!--<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
    <!--</listener>-->

    <!--这段代码如果不用上面的的话是可以实现put的-->
    <!--&lt;!&ndash;<filter>-->
         <!--<filter-name>HttpMethodPutFilter</filter-name>-->
         <!--<filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>-->
     <!--</filter>-->
     <!--<filter-mapping>-->
         <!--<filter-name>HttpMethodPutFilter</filter-name>-->
         <!--<url-pattern>/*</url-pattern>-->
     <!--</filter-mapping>- -->
  <!-- 配置DispatcherServlet -->
  <servlet>
    <servlet-name>Dispatcher</servlet-name>
    <servlet-class>
      org.springframework.web.servlet.DispatcherServlet
    </servlet-class>
      <!-- 配置DispatcherServlet的一个初始化参数：配置SpringMVC配置文件的位置和名称 -->
      <!--
      实际上也可以不通过contextConfigLocation来配置SpringMVC的配置文件，而使用默认的配置文件
      默认的配置文件为：/WEB-INF/<servlet-name>-servlet.xml
       -->
      <init-param>
          <param-name>contextConfigLocation</param-name>
          <param-value>classpath:Dispatcher-servlet.xml</param-value>
      </init-param>
     <!--load-on-startup:表示servlet随服务启动 -->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
      <!--
       第一种：*.action或者*.do，访问以.action或.do结尾 由DispatcherServlet进行解析
       第二种：/ ，所以访问的地址都由DispatcherServlet进行解析，对于静态文本的解析需要配置不让DispatcherServlet进行解析
       使用此种方式可以实现RESTful风格的url
       第三种：/* ,这样配置不对，使用这种配置，最终要转发到一个jsp页面时，
       仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错
       -->
      <servlet-name>Dispatcher</servlet-name>
      <!-- 用于拦截请求，url-pattern为/表示拦截所有请求
           并交由SpringMVC的后台处理器来处理。-->
    <url-pattern>/</url-pattern>
  </servlet-mapping>
    <!-- 为了能处理中文的post请求，再配置一个过滤器，以避免出现中文乱码 -->
    <!--<filter>-->
        <!--<filter-name>encodingFilter</filter-name>-->
        <!--<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>-->
        <!--<init-param>-->
            <!--<param-name>encoding</param-name>-->
            <!--<param-value>UTF-8</param-value>-->
        <!--</init-param>-->
        <!--<init-param>-->
            <!--<param-name>forceEncoding</param-name>-->
            <!--<param-value>true</param-value>-->
        <!--</init-param>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>encodingFilter</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

</web-app>