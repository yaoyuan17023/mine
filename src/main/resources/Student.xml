<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 为DAO接口方法提供sql语句配置 -->
<!-- 为mapper指定唯一一个namespace，正常应该是包名+映射文件名比较好,去掉xml后缀 -->
<mapper namespace="HeMapper">
    <!-- 通过resultMap来映射实体类属性名和表的字段名一一对应关系 -->
    <!-- id属性来映射主键字段 -->
    <!-- result属性来映射非主键字段 -->
    <resultMap id="studentResultMap" type="Student">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="qq" column="qq"/>
        <result property="type" column="type"/>
        <result property="time" column="time"/>
        <result property="school" column="school"/>
        <result property="number" column="number"/>
        <result property="link" column="link"/>
        <result property="hope" column="hope"/>
        <result property="referrer" column="referrer"/>
        <result property="fromWhere" column="from_where"/>
        <result property="createAt" column="create_at"/>
        <result property="updateAt" column="update_at"/>
    </resultMap>
    <!-- select中写sql查询语句，设置id属性为selectStudent，id属性必须唯一。parameterType设置查询时参数的类型。
     resultMap指明查询返回时的结果集的类型，"Student"就表示将查询结果封装成一个Student类返回，Student类就是表Student对应的实体类Student-->
    <!-- 查询 -->
    <select id="selectStudent" parameterType="int" resultMap="studentResultMap">
        SELECT * FROM student WHERE id = #{id}
    </select>
    <!-- 增加 -->
    <insert id="addStudent" parameterType="Student" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO student(name,qq,type,time,school,number,link,hope,referrer,from_where,create_at)
        values(#{name},#{qq},#{type},#{time},#{school},#{number},#{link},#{hope},#{referrer},#{fromWhere},#{createAt})
    </insert>
     <!--修改 -->
    <update id="updateStudent" parameterType="Student">
        UPDATE student set name=#{name},qq=#{qq},type=#{type},time=#{time},school=#{school},number=#{number},link=#{link},hope=#{hope},
        referrer=#{referrer},from_where=#{fromWhere},create_at=#{createAt},update_at=#{updateAt} WHERE id = #{id}
    </update>
     <!--删除 -->
    <delete id="deleteStudent" parameterType="int">
        DELETE FROM student WHERE id = #{id}
    </delete>
    <!-- 查询全部用户 -->
    <select id="getAllStudent" resultType="Student">
        SELECT * FROM student
    </select>
</mapper>